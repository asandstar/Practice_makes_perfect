;保底,实现了功能但没完全满足要求
/*2.初态显示小数点，有键（外部中断方式）参与，数码管静态显示：8个数码管根据按键同时显示键值*/
	ORG 0000H  
	LJMP MAIN

	ORG 0003H
	LJMP SCAN
		
	ORG 0100H  
KEYTAB:

	DB 0EEH,0DEH,0BEH,7EH,0EDH,0DDH,0BDH,7DH
	DB 0EBH,0DBH,0BBH,7BH,0E7H,0D7H,0B7H,77H

CODETAB:    

	DB 11111101B, 01100001B, 11011011B, 11110011B, 01100111B, 10110111B, 10111111B, 11100001B  ;01234567
	DB 11111111B, 11110111B, 11101111B, 00111111B, 10011101B, 01111011B, 10011111B, 10001111B  ;89abcdef
	
	ORG 0200H  
MAIN:       
//	MOV 91H,#0  
//	MOV 92H,#0FFH  
//	MOV 93H,#0  
//	MOV 94H,#0FFH  
	MOV 95H,#0  
	MOV 96H,#0FFH 
	MOV P0,#00H
	MOV P2,#01H 
	SETB IT0				;外部中断0下降沿触发
	SETB PX0				;中断0优先
	SETB EX0				;允许外部中断0
	SETB EA					;允许总中断

LOOP:       
	MOV P1,#0F0H  
	MOV A,P1  
	CJNE A,#0F0H,SCAN  
	LJMP LOOP 
		 
SCAN:
	CLR IE0       
	ACALL DELAY10MS  
	MOV P1,#0FEH  
	MOV A,P1  
	CJNE A,#0FEH, FIND  
	MOV P1,#0FDH  
	MOV A,P1  
	CJNE A,#0FDH,FIND  
	MOV P1,#0FBH  
	MOV A,P1  
	CJNE A,#0FBH,FIND  
	MOV P1,#0F7H  
	MOV A,P1  
	CJNE A,#0F7H,FIND  
	LJMP LOOP  

FIND:       
	MOV B,A  
	MOV DPTR,#KEYTAB  
	MOV R7,#0FFH  
BACK:       
	INC R7  
	MOV A,R7  
	MOVC A,@A+DPTR  
	CJNE A,B,BACK  
DUANMA:  
	MOV DPTR, #CODETAB  
	MOV A,R7  
	MOVC A,@A+DPTR  
	MOV R6,A  

OUT:        
	MOV P0,#00H  
	MOV P2,R6  
	LJMP LOOP
	RETI  

DELAY10MS:          ;@11.0592MHz  
	NOP  
	NOP  
	NOP  
	PUSH 30H  
	PUSH 31H  
	MOV 30H,#87  
	MOV 31H,#10  
NEXT:  
	DJNZ 31H,NEXT  
	DJNZ 30H,NEXT  
	POP 31H  
	POP 30H  
	RET  

DELAY1MS:           ;@11.0592MHz  
	PUSH 30H  
	PUSH 31H  
	MOV 30H,#9  
	MOV 31H,#150  
NEXT1:  
	DJNZ 31H,NEXT1  
	DJNZ 30H,NEXT1  
	POP 31H  
	POP 30H  
	RET  
	END

//	ORG 0000H  
//	LJMP MAIN
//
////	ORG 0003H
////	LJMP INT0_ISR
////		
//	ORG 0100H  
KEYTAB:
//	DB 07EH,0BEH,0DEH,0EEH	;3,2,1,0
//	DB 07DH,0BDH,0DDH,0EDH	;7,6,5,4
//	DB 07BH,0BBH,0DBH,0EBH	;B,A,9,8
//	DB 077H,0B7H,0D7H,0E7H	;F,E,D,C
	DB 0EEH,0DEH,0BEH,7EH,0EDH,0DDH,0BDH,7DH
	DB 0EBH,0DBH,0BBH,7BH,0E7H,0D7H,0B7H,77H

CODETAB:    
//	DB 11111100B, 01100000B, 11011010B, 11110010B, 01100110B, 10110110B, 10111110B, 11100000B  ;01234567
//	DB 11111110B, 11110110B, 11101110B, 00111110B, 10011100B, 01111010B, 10011110B, 10001110B  ;89abcdef
	DB 11111101B, 01100001B, 11011011B, 11110011B, 01100111B, 10110111B, 10111111B, 11100001B  ;01234567
	DB 11111111B, 11110111B, 11101111B, 00111111B, 10011101B, 01111011B, 10011111B, 10001111B  ;89abcdef
;01111111 11111110
;01101111 11110110
;01110111 11101110
;01111100 00111110
;00111001 10011100
;01011110 01111010
;01111001 10011110
;01110001 10001110
//	
//	ORG 0200H  
//MAIN:       
////	MOV 91H,#0  
////	MOV 92H,#0FFH  
////	MOV 93H,#0  
////	MOV 94H,#0FFH  
//	MOV 95H,#0  
//	MOV 96H,#0FFH 
//	MOV P0,#00H
//	MOV P2,#01H 
//
//LOOP:       
//	MOV P1,#0F0H  
//	MOV A,P1  
//	CJNE A,#0F0H,SCAN  
//	LJMP LOOP 
//	
//	 
//SCAN:       
//	ACALL DELAY10MS  
//	MOV P1,#0FEH  
//	MOV A,P1  
//	CJNE A,#0FEH, FIND  
//	MOV P1,#0FDH  
//	MOV A,P1  
//	CJNE A,#0FDH,FIND  
//	MOV P1,#0FBH  
//	MOV A,P1  
//	CJNE A,#0FBH,FIND  
//	MOV P1,#0F7H  
//	MOV A,P1  
//	CJNE A,#0F7H,FIND  
//	LJMP LOOP  
//
//FIND:       
//	MOV B,A  
//	MOV DPTR,#KEYTAB  
//	MOV R7,#0FFH  
//BACK:       
//	INC R7  
//	MOV A,R7  
//	MOVC A,@A+DPTR  
//	CJNE A,B,BACK  
//DUANMA:  
//	MOV DPTR, #CODETAB  
//	MOV A,R7  
//	MOVC A,@A+DPTR  
//	MOV R6,A  
//
//OUT:        
//	MOV P0,#00H  
//	MOV P2,R6  
//	LJMP LOOP  
//
//DELAY10MS:          ;@11.0592MHz  
//	NOP  
//	NOP  
//	NOP  
//	PUSH 30H  
//	PUSH 31H  
//	MOV 30H,#87  
//	MOV 31H,#10  
//NEXT:  
//	DJNZ 31H,NEXT  
//	DJNZ 30H,NEXT  
//	POP 31H  
//	POP 30H  
//	RET  
//
//DELAY1MS:           ;@11.0592MHz  
//	PUSH 30H  
//	PUSH 31H  
//	MOV 30H,#9  
//	MOV 31H,#150  
//NEXT1:  
//	DJNZ 31H,NEXT1  
//	DJNZ 30H,NEXT1  
//	POP 31H  
//	POP 30H  
//	RET  
//	END




//	ORG 0000H  
//	LJMP MAIN
//
//	ORG 0100H  
//KEYTAB:
////	DB 07EH,0BEH,0DEH,0EEH	;3,2,1,0
////	DB 07DH,0BDH,0DDH,0EDH	;7,6,5,4
////	DB 07BH,0BBH,0DBH,0EBH	;B,A,9,8
////	DB 077H,0B7H,0D7H,0E7H	;F,E,D,C
//	DB 0EEH,0DEH,0BEH,7EH,0EDH,0DDH,0BDH,7DH
//	DB 0EBH,0DBH,0BBH,7BH,0E7H,0D7H,0B7H,77H
//
//CODETAB:    
//	DB 11111100B, 01100000B, 11011010B, 11110010B, 01100110B, 10110110B, 10111110B, 11100000B  ;01234567
//	DB 11111110B, 11110110B, 11101110B, 00111110B, 10011100B, 01111010B, 10011110B, 10001110B  ;89abcdef
//;01111111 11111110
//;01101111 11110110
//;01110111 11101110
//;01111100 00111110
//;00111001 10011100
//;01011110 01111010
//;01111001 10011110
//;01110001 10001110
//
//
//
//	
//	ORG 0200H  
//MAIN:       
//	MOV 91H,#0  
//	MOV 92H,#0FFH  
//	MOV 93H,#0  
//	MOV 94H,#0FFH  
//	MOV 95H,#0  
//	MOV 96H,#0FFH 
//	MOV P2,#00H
//	MOV P0,#80H 
//
//LOOP:       
//	MOV P1,#0F0H  
//	MOV A,P1  
//	CJNE A,#0F0H,SCAN  
//	LJMP LOOP 
//	
//	 
//SCAN:       
//	ACALL DELAY10MS  
//	MOV P1,#0FEH  
//	MOV A,P1  
//	CJNE A,#0FEH, FIND  
//	MOV P1,#0FDH  
//	MOV A,P1  
//	CJNE A,#0FDH,FIND  
//	MOV P1,#0FBH  
//	MOV A,P1  
//	CJNE A,#0FBH,FIND  
//	MOV P1,#0F7H  
//	MOV A,P1  
//	CJNE A,#0F7H,FIND  
//	LJMP LOOP  
//
//FIND:       
//	MOV B,A  
//	MOV DPTR,#KEYTAB  
//	MOV R7,#0FFH  
//BACK:       
//	INC R7  
//	MOV A,R7  
//	MOVC A,@A+DPTR  
//	CJNE A,B,BACK  
//DUANMA:  
//	MOV DPTR, #CODETAB  
//	MOV A,R7  
//	MOVC A,@A+DPTR  
//	MOV R6,A  
//
//OUT:        
//	MOV P0,#00H  
//	MOV P2,R6  
//	LJMP LOOP  
//
//DELAY10MS:          ;@11.0592MHz  
//	NOP  
//	NOP  
//	NOP  
//	PUSH 30H  
//	PUSH 31H  
//	MOV 30H,#87  
//	MOV 31H,#10  
//NEXT:  
//	DJNZ 31H,NEXT  
//	DJNZ 30H,NEXT  
//	POP 31H  
//	POP 30H  
//	RET  
//
//DELAY1MS:           ;@11.0592MHz  
//	PUSH 30H  
//	PUSH 31H  
//	MOV 30H,#9  
//	MOV 31H,#150  
//NEXT1:  
//	DJNZ 31H,NEXT1  
//	DJNZ 30H,NEXT1  
//	POP 31H  
//	POP 30H  
//	RET  
//	END
